{"ast":null,"code":"// import { createReducer } from '@reduxjs/toolkit';\n// import { addContact, removeContact, setContacts, setFilters } from './actions';\n// export const initialState = {\n//   contacts: [],\n//   filter: '',\n// };\n// const state = initialState;\n// export const rootReducer = createReducer(state, {\n//   [addContact]: (state, action) => {\n//     state.contacts.push(action.payload);\n//   },\n//   [removeContact]: (state, action) => {\n//     const index = state.contacts.findIndex(\n//       contact => contact.id === action.payload\n//     );\n//     state.contacts.splice(index, 1);\n//   },\n//   [setContacts]: (state, action) => {\n//     return { ...state, contacts: [...action.payload] };\n//   },\n//   [setFilters]: (state, action) => {\n//     return { ...state, filter: action.payload };\n//   },\n// });\nimport { createSlice } from '@reduxjs/toolkit';\nimport { addContact, removeContact, setContacts, setFilters } from './actions';\nexport const initialState = {\n  contacts: [],\n  filter: ''\n};\nconst state = initialState;\nexport const rootReducer = createReducer(state, {\n  [addContact]: (state, action) => {\n    state.contacts.push(action.payload);\n  },\n  [removeContact]: (state, action) => {\n    const index = state.contacts.findIndex(contact => contact.id === action.payload);\n    state.contacts.splice(index, 1);\n  },\n  [setContacts]: (state, action) => {\n    return { ...state,\n      contacts: [...action.payload]\n    };\n  },\n  [setFilters]: (state, action) => {\n    return { ...state,\n      filter: action.payload\n    };\n  }\n});","map":{"version":3,"sources":["M:/programy/Programy_kodowanie/github/goit-react-hw-06-phonebook/src/redux/reducers.js"],"names":["createSlice","addContact","removeContact","setContacts","setFilters","initialState","contacts","filter","state","rootReducer","createReducer","action","push","payload","index","findIndex","contact","id","splice"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,UAAT,EAAqBC,aAArB,EAAoCC,WAApC,EAAiDC,UAAjD,QAAmE,WAAnE;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,QAAQ,EAAE,EADgB;AAE1BC,EAAAA,MAAM,EAAE;AAFkB,CAArB;AAIP,MAAMC,KAAK,GAAGH,YAAd;AAEA,OAAO,MAAMI,WAAW,GAAGC,aAAa,CAACF,KAAD,EAAQ;AAC9C,GAACP,UAAD,GAAc,CAACO,KAAD,EAAQG,MAAR,KAAmB;AAC/BH,IAAAA,KAAK,CAACF,QAAN,CAAeM,IAAf,CAAoBD,MAAM,CAACE,OAA3B;AACD,GAH6C;AAI9C,GAACX,aAAD,GAAiB,CAACM,KAAD,EAAQG,MAAR,KAAmB;AAClC,UAAMG,KAAK,GAAGN,KAAK,CAACF,QAAN,CAAeS,SAAf,CACZC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACE,OADrB,CAAd;AAGAL,IAAAA,KAAK,CAACF,QAAN,CAAeY,MAAf,CAAsBJ,KAAtB,EAA6B,CAA7B;AACD,GAT6C;AAU9C,GAACX,WAAD,GAAe,CAACK,KAAD,EAAQG,MAAR,KAAmB;AAChC,WAAO,EAAE,GAAGH,KAAL;AAAYF,MAAAA,QAAQ,EAAE,CAAC,GAAGK,MAAM,CAACE,OAAX;AAAtB,KAAP;AACD,GAZ6C;AAa9C,GAACT,UAAD,GAAc,CAACI,KAAD,EAAQG,MAAR,KAAmB;AAC/B,WAAO,EAAE,GAAGH,KAAL;AAAYD,MAAAA,MAAM,EAAEI,MAAM,CAACE;AAA3B,KAAP;AACD;AAf6C,CAAR,CAAjC","sourcesContent":["// import { createReducer } from '@reduxjs/toolkit';\r\n// import { addContact, removeContact, setContacts, setFilters } from './actions';\r\n\r\n// export const initialState = {\r\n//   contacts: [],\r\n//   filter: '',\r\n// };\r\n// const state = initialState;\r\n\r\n// export const rootReducer = createReducer(state, {\r\n//   [addContact]: (state, action) => {\r\n//     state.contacts.push(action.payload);\r\n//   },\r\n//   [removeContact]: (state, action) => {\r\n//     const index = state.contacts.findIndex(\r\n//       contact => contact.id === action.payload\r\n//     );\r\n//     state.contacts.splice(index, 1);\r\n//   },\r\n//   [setContacts]: (state, action) => {\r\n//     return { ...state, contacts: [...action.payload] };\r\n//   },\r\n//   [setFilters]: (state, action) => {\r\n//     return { ...state, filter: action.payload };\r\n//   },\r\n// });\r\n\r\nimport { createSlice } from '@reduxjs/toolkit';\r\nimport { addContact, removeContact, setContacts, setFilters } from './actions';\r\n\r\nexport const initialState = {\r\n  contacts: [],\r\n  filter: '',\r\n};\r\nconst state = initialState;\r\n\r\nexport const rootReducer = createReducer(state, {\r\n  [addContact]: (state, action) => {\r\n    state.contacts.push(action.payload);\r\n  },\r\n  [removeContact]: (state, action) => {\r\n    const index = state.contacts.findIndex(\r\n      contact => contact.id === action.payload\r\n    );\r\n    state.contacts.splice(index, 1);\r\n  },\r\n  [setContacts]: (state, action) => {\r\n    return { ...state, contacts: [...action.payload] };\r\n  },\r\n  [setFilters]: (state, action) => {\r\n    return { ...state, filter: action.payload };\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}