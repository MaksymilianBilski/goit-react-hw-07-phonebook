{"ast":null,"code":"var _jsxFileName = \"M:\\\\programy\\\\Programy_kodowanie\\\\github\\\\goit-react-hw-06-phonebook\\\\src\\\\components\\\\Form\\\\ContactsList.jsx\",\n    _s = $RefreshSig$();\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/selectors';\nimport { setContacts, setFilters } from 'redux/actions';\nimport { nanoid } from 'nanoid';\nimport css from './Form.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const AddContacts = () => {\n  _s();\n\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const onFormSubmit = e => {\n    dispatch(setFilters(''));\n    e.preventDefault();\n    const form = e.currentTarget;\n    const name = form.elements.name;\n    const number = form.elements.number;\n\n    if (contacts.find(contact => contact.name === name.value && contact.number === number.value)) {\n      alert(`${name.value} is already in contacts`);\n      return;\n    }\n\n    const contact = {\n      name: name.value,\n      number: number.value,\n      id: nanoid()\n    }; //add single contact to local storage\n\n    const newContacts = [...contacts, contact];\n    dispatch(setContacts(newContacts));\n    localStorage.setItem('contacts', JSON.stringify(newContacts));\n    form.reset();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: css.form,\n      onSubmit: onFormSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: css.name,\n        type: \"text\",\n        name: \"name\",\n        pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n        title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: css.number,\n        type: \"tel\",\n        name: \"number\",\n        pattern: \"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",\n        title: \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: css.button,\n        children: \"Add contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(AddContacts, \"3R+rBFQxXNh0z/dkPO+3hsRF/P0=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = AddContacts;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddContacts\");","map":{"version":3,"sources":["M:/programy/Programy_kodowanie/github/goit-react-hw-06-phonebook/src/components/Form/ContactsList.jsx"],"names":["useSelector","useDispatch","getContacts","getFilter","setContacts","setFilters","nanoid","css","AddContacts","contacts","filter","dispatch","onFormSubmit","e","preventDefault","form","currentTarget","name","elements","number","find","contact","value","alert","id","newContacts","localStorage","setItem","JSON","stringify","reset","button"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,iBAAvC;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,eAAxC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;;;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAC/B,QAAMC,QAAQ,GAAGT,WAAW,CAACE,WAAD,CAA5B;AACA,QAAMQ,MAAM,GAAGV,WAAW,CAACG,SAAD,CAA1B;AACA,QAAMQ,QAAQ,GAAGV,WAAW,EAA5B;;AAEA,QAAMW,YAAY,GAAGC,CAAC,IAAI;AACxBF,IAAAA,QAAQ,CAACN,UAAU,CAAC,EAAD,CAAX,CAAR;AACAQ,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,IAAI,GAAGF,CAAC,CAACG,aAAf;AACA,UAAMC,IAAI,GAAGF,IAAI,CAACG,QAAL,CAAcD,IAA3B;AACA,UAAME,MAAM,GAAGJ,IAAI,CAACG,QAAL,CAAcC,MAA7B;;AACA,QACEV,QAAQ,CAACW,IAAT,CACEC,OAAO,IACLA,OAAO,CAACJ,IAAR,KAAiBA,IAAI,CAACK,KAAtB,IAA+BD,OAAO,CAACF,MAAR,KAAmBA,MAAM,CAACG,KAF7D,CADF,EAKE;AACAC,MAAAA,KAAK,CAAE,GAAEN,IAAI,CAACK,KAAM,yBAAf,CAAL;AACA;AACD;;AACD,UAAMD,OAAO,GAAG;AACdJ,MAAAA,IAAI,EAAEA,IAAI,CAACK,KADG;AAEdH,MAAAA,MAAM,EAAEA,MAAM,CAACG,KAFD;AAGdE,MAAAA,EAAE,EAAElB,MAAM;AAHI,KAAhB,CAfwB,CAoBxB;;AACA,UAAMmB,WAAW,GAAG,CAAC,GAAGhB,QAAJ,EAAcY,OAAd,CAApB;AACAV,IAAAA,QAAQ,CAACP,WAAW,CAACqB,WAAD,CAAZ,CAAR;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeJ,WAAf,CAAjC;AACAV,IAAAA,IAAI,CAACe,KAAL;AACD,GAzBD;;AA2BA,sBACE;AAAA,2BACE;AAAM,MAAA,SAAS,EAAEvB,GAAG,CAACQ,IAArB;AAA2B,MAAA,QAAQ,EAAEH,YAArC;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,SAAS,EAAEL,GAAG,CAACU,IADjB;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,OAAO,EAAC,wHAJV;AAKE,QAAA,KAAK,EAAC,wIALR;AAME,QAAA,QAAQ;AANV;AAAA;AAAA;AAAA;AAAA,cAFF,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF,eAWE;AACE,QAAA,SAAS,EAAEV,GAAG,CAACY,MADjB;AAEE,QAAA,IAAI,EAAC,KAFP;AAGE,QAAA,IAAI,EAAC,QAHP;AAIE,QAAA,OAAO,EAAC,wFAJV;AAKE,QAAA,KAAK,EAAC,8FALR;AAME,QAAA,QAAQ;AANV;AAAA;AAAA;AAAA;AAAA,cAXF,eAmBE;AAAQ,QAAA,SAAS,EAAEZ,GAAG,CAACwB,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAyBD,CAzDM;;GAAMvB,W;UACMR,W,EACFA,W,EACEC,W;;;KAHNO,W","sourcesContent":["import { useSelector, useDispatch } from 'react-redux';\r\nimport { getContacts, getFilter } from 'redux/selectors';\r\nimport { setContacts, setFilters } from 'redux/actions';\r\nimport { nanoid } from 'nanoid';\r\nimport css from './Form.module.css';\r\n\r\nexport const AddContacts = () => {\r\n  const contacts = useSelector(getContacts);\r\n  const filter = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  const onFormSubmit = e => {\r\n    dispatch(setFilters(''));\r\n    e.preventDefault();\r\n    const form = e.currentTarget;\r\n    const name = form.elements.name;\r\n    const number = form.elements.number;\r\n    if (\r\n      contacts.find(\r\n        contact =>\r\n          contact.name === name.value && contact.number === number.value\r\n      )\r\n    ) {\r\n      alert(`${name.value} is already in contacts`);\r\n      return;\r\n    }\r\n    const contact = {\r\n      name: name.value,\r\n      number: number.value,\r\n      id: nanoid(),\r\n    };\r\n    //add single contact to local storage\r\n    const newContacts = [...contacts, contact];\r\n    dispatch(setContacts(newContacts));\r\n    localStorage.setItem('contacts', JSON.stringify(newContacts));\r\n    form.reset();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className={css.form} onSubmit={onFormSubmit}>\r\n        <label>Name</label>\r\n        <input\r\n          className={css.name}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n          required\r\n        />\r\n        <label>Number</label>\r\n        <input\r\n          className={css.number}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n          required\r\n        />\r\n        <button className={css.button}>Add contact</button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}