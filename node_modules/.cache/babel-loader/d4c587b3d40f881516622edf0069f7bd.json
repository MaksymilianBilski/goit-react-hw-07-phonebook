{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { addContact, removeContact, setContacts, setFilters } from './actions'; // export const rootReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case 'contacts/addContact':\n//       return { ...state, contacts: [...state.contacts, action.payload] };\n//     case 'contacts/removeContact':\n//       return {\n//         ...state,\n//         contacts: state.contacts.filter(\n//           contact => contact.id !== action.payload\n//         ),\n//       };\n//     case 'contacts/setContacts':\n//       return { ...state, contacts: [...action.payload] };\n//     case 'contacts/setFilters':\n//       return { ...state, filter: action.payload };\n//     default:\n//       return;\n//   }\n// };\n\nexport const initialState = {\n  contacts: [],\n  filter: ''\n};\nconst state = initialState;\nexport const rootReducer = createReducer(state, {\n  [addContact]: (state, action) => {\n    return { ...state,\n      contacts: [...state.contacts, action.payload]\n    };\n  },\n  [removeContact]: (state, action) => {\n    return { ...state,\n      contacts: state.contacts.filter(contact => contact.id !== action.payload)\n    };\n  },\n  [setContacts]: (state, action) => {\n    return { ...state,\n      contacts: [...action.payload]\n    };\n  },\n  [setFilters]: (state, action) => {\n    return { ...state,\n      filter: action.payload\n    };\n  }\n});","map":{"version":3,"sources":["M:/programy/Programy_kodowanie/github/goit-react-hw-06-phonebook/src/redux/reducers.js"],"names":["createReducer","addContact","removeContact","setContacts","setFilters","initialState","contacts","filter","state","rootReducer","action","payload","contact","id"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B;AACA,SAASC,UAAT,EAAqBC,aAArB,EAAoCC,WAApC,EAAiDC,UAAjD,QAAmE,WAAnE,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,QAAQ,EAAE,EADgB;AAE1BC,EAAAA,MAAM,EAAE;AAFkB,CAArB;AAIP,MAAMC,KAAK,GAAGH,YAAd;AAEA,OAAO,MAAMI,WAAW,GAAGT,aAAa,CAACQ,KAAD,EAAQ;AAC9C,GAACP,UAAD,GAAc,CAACO,KAAD,EAAQE,MAAR,KAAmB;AAC/B,WAAO,EAAE,GAAGF,KAAL;AAAYF,MAAAA,QAAQ,EAAE,CAAC,GAAGE,KAAK,CAACF,QAAV,EAAoBI,MAAM,CAACC,OAA3B;AAAtB,KAAP;AACD,GAH6C;AAI9C,GAACT,aAAD,GAAiB,CAACM,KAAD,EAAQE,MAAR,KAAmB;AAClC,WAAO,EACL,GAAGF,KADE;AAELF,MAAAA,QAAQ,EAAEE,KAAK,CAACF,QAAN,CAAeC,MAAf,CAAsBK,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeH,MAAM,CAACC,OAAvD;AAFL,KAAP;AAID,GAT6C;AAU9C,GAACR,WAAD,GAAe,CAACK,KAAD,EAAQE,MAAR,KAAmB;AAChC,WAAO,EAAE,GAAGF,KAAL;AAAYF,MAAAA,QAAQ,EAAE,CAAC,GAAGI,MAAM,CAACC,OAAX;AAAtB,KAAP;AACD,GAZ6C;AAa9C,GAACP,UAAD,GAAc,CAACI,KAAD,EAAQE,MAAR,KAAmB;AAC/B,WAAO,EAAE,GAAGF,KAAL;AAAYD,MAAAA,MAAM,EAAEG,MAAM,CAACC;AAA3B,KAAP;AACD;AAf6C,CAAR,CAAjC","sourcesContent":["import { createReducer } from '@reduxjs/toolkit';\r\nimport { addContact, removeContact, setContacts, setFilters } from './actions';\r\n\r\n// export const rootReducer = (state = initialState, action) => {\r\n//   switch (action.type) {\r\n//     case 'contacts/addContact':\r\n//       return { ...state, contacts: [...state.contacts, action.payload] };\r\n//     case 'contacts/removeContact':\r\n//       return {\r\n//         ...state,\r\n//         contacts: state.contacts.filter(\r\n//           contact => contact.id !== action.payload\r\n//         ),\r\n//       };\r\n//     case 'contacts/setContacts':\r\n//       return { ...state, contacts: [...action.payload] };\r\n//     case 'contacts/setFilters':\r\n//       return { ...state, filter: action.payload };\r\n//     default:\r\n//       return;\r\n//   }\r\n// };\r\n\r\nexport const initialState = {\r\n  contacts: [],\r\n  filter: '',\r\n};\r\nconst state = initialState;\r\n\r\nexport const rootReducer = createReducer(state, {\r\n  [addContact]: (state, action) => {\r\n    return { ...state, contacts: [...state.contacts, action.payload] };\r\n  },\r\n  [removeContact]: (state, action) => {\r\n    return {\r\n      ...state,\r\n      contacts: state.contacts.filter(contact => contact.id !== action.payload),\r\n    };\r\n  },\r\n  [setContacts]: (state, action) => {\r\n    return { ...state, contacts: [...action.payload] };\r\n  },\r\n  [setFilters]: (state, action) => {\r\n    return { ...state, filter: action.payload };\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}