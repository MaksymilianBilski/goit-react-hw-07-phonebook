{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { initialState } from './store';\nimport { addContact, removeContact, setContacts, setFilters } from './actions';\nexport const rootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'contacts/addContact':\n      return { ...state,\n        contacts: [...state.contacts, action.payload]\n      };\n\n    case 'contacts/removeContact':\n      return { ...state,\n        contacts: state.contacts.filter(contact => contact.id !== action.payload)\n      };\n\n    case 'contacts/setContacts':\n      return { ...state,\n        contacts: [...action.payload]\n      };\n\n    case 'contacts/setFilters':\n      return { ...state,\n        filter: action.payload\n      };\n\n    default:\n      return;\n  }\n};\nexport const rootReduce = createReducer(state = initialState, {\n  [addContact]: (state, action) => {\n    return { ...state,\n      contacts: [...state.contacts, action.payload]\n    };\n  },\n  [removeContact]: (state, action) => {\n    return { ...state,\n      contacts: state.contacts.filter(contact => contact.id !== action.payload)\n    };\n  },\n  [setContacts]: (state, action) => {\n    return { ...state,\n      contacts: [...action.payload]\n    };\n  },\n  [setFilters]: (state, action) => {\n    return { ...state,\n      filter: action.payload\n    };\n  }\n});","map":{"version":3,"sources":["M:/programy/Programy_kodowanie/github/goit-react-hw-06-phonebook/src/redux/reducers.js"],"names":["createReducer","initialState","addContact","removeContact","setContacts","setFilters","rootReducer","state","action","type","contacts","payload","filter","contact","id","rootReduce"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B;AACA,SAASC,YAAT,QAA6B,SAA7B;AACA,SAASC,UAAT,EAAqBC,aAArB,EAAoCC,WAApC,EAAiDC,UAAjD,QAAmE,WAAnE;AAEA,OAAO,MAAMC,WAAW,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXO,MAAW;;AAC3D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,qBAAL;AACE,aAAO,EAAE,GAAGF,KAAL;AAAYG,QAAAA,QAAQ,EAAE,CAAC,GAAGH,KAAK,CAACG,QAAV,EAAoBF,MAAM,CAACG,OAA3B;AAAtB,OAAP;;AACF,SAAK,wBAAL;AACE,aAAO,EACL,GAAGJ,KADE;AAELG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeE,MAAf,CACRC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACG,OADzB;AAFL,OAAP;;AAMF,SAAK,sBAAL;AACE,aAAO,EAAE,GAAGJ,KAAL;AAAYG,QAAAA,QAAQ,EAAE,CAAC,GAAGF,MAAM,CAACG,OAAX;AAAtB,OAAP;;AACF,SAAK,qBAAL;AACE,aAAO,EAAE,GAAGJ,KAAL;AAAYK,QAAAA,MAAM,EAAEJ,MAAM,CAACG;AAA3B,OAAP;;AACF;AACE;AAfJ;AAiBD,CAlBM;AAoBP,OAAO,MAAMI,UAAU,GAAGf,aAAa,CAAEO,KAAK,GAAGN,YAAV,EAAyB;AAC9D,GAACC,UAAD,GAAc,CAACK,KAAD,EAAQC,MAAR,KAAmB;AAC/B,WAAO,EAAE,GAAGD,KAAL;AAAYG,MAAAA,QAAQ,EAAE,CAAC,GAAGH,KAAK,CAACG,QAAV,EAAoBF,MAAM,CAACG,OAA3B;AAAtB,KAAP;AACD,GAH6D;AAI9D,GAACR,aAAD,GAAiB,CAACI,KAAD,EAAQC,MAAR,KAAmB;AAClC,WAAO,EACL,GAAGD,KADE;AAELG,MAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeE,MAAf,CAAsBC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACG,OAAvD;AAFL,KAAP;AAID,GAT6D;AAU9D,GAACP,WAAD,GAAe,CAACG,KAAD,EAAQC,MAAR,KAAmB;AAChC,WAAO,EAAE,GAAGD,KAAL;AAAYG,MAAAA,QAAQ,EAAE,CAAC,GAAGF,MAAM,CAACG,OAAX;AAAtB,KAAP;AACD,GAZ6D;AAa9D,GAACN,UAAD,GAAc,CAACE,KAAD,EAAQC,MAAR,KAAmB;AAC/B,WAAO,EAAE,GAAGD,KAAL;AAAYK,MAAAA,MAAM,EAAEJ,MAAM,CAACG;AAA3B,KAAP;AACD;AAf6D,CAAzB,CAAhC","sourcesContent":["import { createReducer } from '@reduxjs/toolkit';\r\nimport { initialState } from './store';\r\nimport { addContact, removeContact, setContacts, setFilters } from './actions';\r\n\r\nexport const rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'contacts/addContact':\r\n      return { ...state, contacts: [...state.contacts, action.payload] };\r\n    case 'contacts/removeContact':\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.filter(\r\n          contact => contact.id !== action.payload\r\n        ),\r\n      };\r\n    case 'contacts/setContacts':\r\n      return { ...state, contacts: [...action.payload] };\r\n    case 'contacts/setFilters':\r\n      return { ...state, filter: action.payload };\r\n    default:\r\n      return;\r\n  }\r\n};\r\n\r\nexport const rootReduce = createReducer((state = initialState), {\r\n  [addContact]: (state, action) => {\r\n    return { ...state, contacts: [...state.contacts, action.payload] };\r\n  },\r\n  [removeContact]: (state, action) => {\r\n    return {\r\n      ...state,\r\n      contacts: state.contacts.filter(contact => contact.id !== action.payload),\r\n    };\r\n  },\r\n  [setContacts]: (state, action) => {\r\n    return { ...state, contacts: [...action.payload] };\r\n  },\r\n  [setFilters]: (state, action) => {\r\n    return { ...state, filter: action.payload };\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}