{"ast":null,"code":"// import { createReducer } from '@reduxjs/toolkit';\n// import { addContact, removeContact, setContacts, setFilters } from './actions';\n// export const initialState = {\n//   contacts: [],\n//   filter: '',\n// };\n// const state = initialState;\n// export const rootReducer = createReducer(state, {\n//   [addContact]: (state, action) => {\n//     state.contacts.push(action.payload);\n//   },\n//   [removeContact]: (state, action) => {\n//     const index = state.contacts.findIndex(\n//       contact => contact.id === action.payload\n//     );\n//     state.contacts.splice(index, 1);\n//   },\n//   [setContacts]: (state, action) => {\n//     return { ...state, contacts: [...action.payload] };\n//   },\n//   [setFilters]: (state, action) => {\n//     return { ...state, filter: action.payload };\n//   },\n// });\nimport { nanoid } from 'nanoid';\nimport { combineReducers, createSlice } from '@reduxjs/toolkit';\nimport { initialState } from './store';\nexport const contactsReducer = createSlice({\n  name: 'contacts',\n  initialState: initialState.contacts,\n  reducers: {\n    addContacts: {\n      reducer(state, action) {\n        state.contacts.push(action.payload);\n      },\n\n      prepare(name, number) {\n        return {\n          payload: {\n            name,\n            number,\n            id: nanoid()\n          }\n        };\n      }\n\n    },\n\n    removeContact(state, action) {\n      const index = state.contacts.findIndex(contact => contact.id === action.payload);\n      state.contacts.splice(index, 1);\n    },\n\n    setContacts(state, action) {\n      return { ...state,\n        contacts: [...action.payload]\n      };\n    },\n\n    setFilters(state, action) {\n      return { ...state,\n        filter: action.payload\n      };\n    }\n\n  }\n});\nexport const {\n  setContacts,\n  addContact,\n  removeContact,\n  setFilters\n} = contactsReducer.actions;\nexport const rootReducer = combineReducers({\n  rootReducer: contactsReducer.reducer\n});","map":{"version":3,"sources":["M:/programy/Programy_kodowanie/github/goit-react-hw-06-phonebook/src/redux/contactsSlice.js"],"names":["nanoid","combineReducers","createSlice","initialState","contactsReducer","name","contacts","reducers","addContacts","reducer","state","action","push","payload","prepare","number","id","removeContact","index","findIndex","contact","splice","setContacts","setFilters","filter","addContact","actions","rootReducer"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,kBAA7C;AACA,SAASC,YAAT,QAA6B,SAA7B;AAEA,OAAO,MAAMC,eAAe,GAAGF,WAAW,CAAC;AACzCG,EAAAA,IAAI,EAAE,UADmC;AAEzCF,EAAAA,YAAY,EAAEA,YAAY,CAACG,QAFc;AAGzCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAE;AACXC,MAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACrBD,QAAAA,KAAK,CAACJ,QAAN,CAAeM,IAAf,CAAoBD,MAAM,CAACE,OAA3B;AACD,OAHU;;AAIXC,MAAAA,OAAO,CAACT,IAAD,EAAOU,MAAP,EAAe;AACpB,eAAO;AACLF,UAAAA,OAAO,EAAE;AACPR,YAAAA,IADO;AAEPU,YAAAA,MAFO;AAGPC,YAAAA,EAAE,EAAEhB,MAAM;AAHH;AADJ,SAAP;AAOD;;AAZU,KADL;;AAeRiB,IAAAA,aAAa,CAACP,KAAD,EAAQC,MAAR,EAAgB;AAC3B,YAAMO,KAAK,GAAGR,KAAK,CAACJ,QAAN,CAAea,SAAf,CACZC,OAAO,IAAIA,OAAO,CAACJ,EAAR,KAAeL,MAAM,CAACE,OADrB,CAAd;AAGAH,MAAAA,KAAK,CAACJ,QAAN,CAAee,MAAf,CAAsBH,KAAtB,EAA6B,CAA7B;AACD,KApBO;;AAqBRI,IAAAA,WAAW,CAACZ,KAAD,EAAQC,MAAR,EAAgB;AACzB,aAAO,EAAE,GAAGD,KAAL;AAAYJ,QAAAA,QAAQ,EAAE,CAAC,GAAGK,MAAM,CAACE,OAAX;AAAtB,OAAP;AACD,KAvBO;;AAwBRU,IAAAA,UAAU,CAACb,KAAD,EAAQC,MAAR,EAAgB;AACxB,aAAO,EAAE,GAAGD,KAAL;AAAYc,QAAAA,MAAM,EAAEb,MAAM,CAACE;AAA3B,OAAP;AACD;;AA1BO;AAH+B,CAAD,CAAnC;AAiCP,OAAO,MAAM;AAAES,EAAAA,WAAF;AAAeG,EAAAA,UAAf;AAA2BR,EAAAA,aAA3B;AAA0CM,EAAAA;AAA1C,IACXnB,eAAe,CAACsB,OADX;AAGP,OAAO,MAAMC,WAAW,GAAG1B,eAAe,CAAC;AACzC0B,EAAAA,WAAW,EAAEvB,eAAe,CAACK;AADY,CAAD,CAAnC","sourcesContent":["// import { createReducer } from '@reduxjs/toolkit';\r\n// import { addContact, removeContact, setContacts, setFilters } from './actions';\r\n\r\n// export const initialState = {\r\n//   contacts: [],\r\n//   filter: '',\r\n// };\r\n// const state = initialState;\r\n\r\n// export const rootReducer = createReducer(state, {\r\n//   [addContact]: (state, action) => {\r\n//     state.contacts.push(action.payload);\r\n//   },\r\n//   [removeContact]: (state, action) => {\r\n//     const index = state.contacts.findIndex(\r\n//       contact => contact.id === action.payload\r\n//     );\r\n//     state.contacts.splice(index, 1);\r\n//   },\r\n//   [setContacts]: (state, action) => {\r\n//     return { ...state, contacts: [...action.payload] };\r\n//   },\r\n//   [setFilters]: (state, action) => {\r\n//     return { ...state, filter: action.payload };\r\n//   },\r\n// });\r\n\r\nimport { nanoid } from 'nanoid';\r\nimport { combineReducers, createSlice } from '@reduxjs/toolkit';\r\nimport { initialState } from './store';\r\n\r\nexport const contactsReducer = createSlice({\r\n  name: 'contacts',\r\n  initialState: initialState.contacts,\r\n  reducers: {\r\n    addContacts: {\r\n      reducer(state, action) {\r\n        state.contacts.push(action.payload);\r\n      },\r\n      prepare(name, number) {\r\n        return {\r\n          payload: {\r\n            name,\r\n            number,\r\n            id: nanoid(),\r\n          },\r\n        };\r\n      },\r\n    },\r\n    removeContact(state, action) {\r\n      const index = state.contacts.findIndex(\r\n        contact => contact.id === action.payload\r\n      );\r\n      state.contacts.splice(index, 1);\r\n    },\r\n    setContacts(state, action) {\r\n      return { ...state, contacts: [...action.payload] };\r\n    },\r\n    setFilters(state, action) {\r\n      return { ...state, filter: action.payload };\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setContacts, addContact, removeContact, setFilters } =\r\n  contactsReducer.actions;\r\n\r\nexport const rootReducer = combineReducers({\r\n  rootReducer: contactsReducer.reducer,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}