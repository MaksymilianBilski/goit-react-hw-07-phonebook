{"ast":null,"code":"// import { createReducer } from '@reduxjs/toolkit';\n// import { addContact, removeContact, setContacts, setFilters } from './actions';\n// export const initialState = {\n//   contacts: [],\n//   filter: '',\n// };\n// const state = initialState;\n// export const rootReducer = createReducer(state, {\n//   [addContact]: (state, action) => {\n//     state.contacts.push(action.payload);\n//   },\n//   [removeContact]: (state, action) => {\n//     const index = state.contacts.findIndex(\n//       contact => contact.id === action.payload\n//     );\n//     state.contacts.splice(index, 1);\n//   },\n//   [setContacts]: (state, action) => {\n//     return { ...state, contacts: [...action.payload] };\n//   },\n//   [setFilters]: (state, action) => {\n//     return { ...state, filter: action.payload };\n//   },\n// });\nimport { nanoid } from 'nanoid';\nimport { createSlice } from '@reduxjs/toolkit';\nimport { addContact, removeContact, setContacts, setFilters } from './actions';\nexport const initialState = {\n  contacts: [],\n  filter: ''\n};\nconst state = initialState;\nexport const rootReducer = createSlice({\n  name: 'contacts',\n  initialState: state,\n  reducers: {\n    addContact(state, action) {\n      state.contacts.push(action.payload);\n    },\n\n    prepare(name, number) {\n      return {\n        payload: {\n          name,\n          number,\n          id: nanoid()\n        }\n      };\n    },\n\n    removeContact: (state, action) => {\n      const index = state.contacts.findIndex(contact => contact.id === action.payload);\n      state.contacts.splice(index, 1);\n    },\n    setContacts: (state, action) => {\n      return { ...state,\n        contacts: [...action.payload]\n      };\n    },\n    setFilters: (state, action) => {\n      return { ...state,\n        filter: action.payload\n      };\n    }\n  }\n});\nexport { setContacts };","map":{"version":3,"sources":["M:/programy/Programy_kodowanie/github/goit-react-hw-06-phonebook/src/redux/reducers.js"],"names":["nanoid","createSlice","addContact","removeContact","setContacts","setFilters","initialState","contacts","filter","state","rootReducer","name","reducers","action","push","payload","prepare","number","id","index","findIndex","contact","splice"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,UAAT,EAAqBC,aAArB,EAAoCC,WAApC,EAAiDC,UAAjD,QAAmE,WAAnE;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,QAAQ,EAAE,EADgB;AAE1BC,EAAAA,MAAM,EAAE;AAFkB,CAArB;AAIP,MAAMC,KAAK,GAAGH,YAAd;AAEA,OAAO,MAAMI,WAAW,GAAGT,WAAW,CAAC;AACrCU,EAAAA,IAAI,EAAE,UAD+B;AAErCL,EAAAA,YAAY,EAAEG,KAFuB;AAGrCG,EAAAA,QAAQ,EAAE;AACRV,IAAAA,UAAU,CAACO,KAAD,EAAQI,MAAR,EAAgB;AACxBJ,MAAAA,KAAK,CAACF,QAAN,CAAeO,IAAf,CAAoBD,MAAM,CAACE,OAA3B;AACD,KAHO;;AAIRC,IAAAA,OAAO,CAACL,IAAD,EAAOM,MAAP,EAAe;AACpB,aAAO;AACLF,QAAAA,OAAO,EAAE;AACPJ,UAAAA,IADO;AAEPM,UAAAA,MAFO;AAGPC,UAAAA,EAAE,EAAElB,MAAM;AAHH;AADJ,OAAP;AAOD,KAZO;;AAaRG,IAAAA,aAAa,EAAE,CAACM,KAAD,EAAQI,MAAR,KAAmB;AAChC,YAAMM,KAAK,GAAGV,KAAK,CAACF,QAAN,CAAea,SAAf,CACZC,OAAO,IAAIA,OAAO,CAACH,EAAR,KAAeL,MAAM,CAACE,OADrB,CAAd;AAGAN,MAAAA,KAAK,CAACF,QAAN,CAAee,MAAf,CAAsBH,KAAtB,EAA6B,CAA7B;AACD,KAlBO;AAmBRf,IAAAA,WAAW,EAAE,CAACK,KAAD,EAAQI,MAAR,KAAmB;AAC9B,aAAO,EAAE,GAAGJ,KAAL;AAAYF,QAAAA,QAAQ,EAAE,CAAC,GAAGM,MAAM,CAACE,OAAX;AAAtB,OAAP;AACD,KArBO;AAsBRV,IAAAA,UAAU,EAAE,CAACI,KAAD,EAAQI,MAAR,KAAmB;AAC7B,aAAO,EAAE,GAAGJ,KAAL;AAAYD,QAAAA,MAAM,EAAEK,MAAM,CAACE;AAA3B,OAAP;AACD;AAxBO;AAH2B,CAAD,CAA/B;AA+BP,SAAQX,WAAR","sourcesContent":["// import { createReducer } from '@reduxjs/toolkit';\r\n// import { addContact, removeContact, setContacts, setFilters } from './actions';\r\n\r\n// export const initialState = {\r\n//   contacts: [],\r\n//   filter: '',\r\n// };\r\n// const state = initialState;\r\n\r\n// export const rootReducer = createReducer(state, {\r\n//   [addContact]: (state, action) => {\r\n//     state.contacts.push(action.payload);\r\n//   },\r\n//   [removeContact]: (state, action) => {\r\n//     const index = state.contacts.findIndex(\r\n//       contact => contact.id === action.payload\r\n//     );\r\n//     state.contacts.splice(index, 1);\r\n//   },\r\n//   [setContacts]: (state, action) => {\r\n//     return { ...state, contacts: [...action.payload] };\r\n//   },\r\n//   [setFilters]: (state, action) => {\r\n//     return { ...state, filter: action.payload };\r\n//   },\r\n// });\r\n\r\nimport { nanoid } from 'nanoid';\r\nimport { createSlice } from '@reduxjs/toolkit';\r\nimport { addContact, removeContact, setContacts, setFilters } from './actions';\r\n\r\nexport const initialState = {\r\n  contacts: [],\r\n  filter: '',\r\n};\r\nconst state = initialState;\r\n\r\nexport const rootReducer = createSlice({\r\n  name: 'contacts',\r\n  initialState: state,\r\n  reducers: {\r\n    addContact(state, action) {\r\n      state.contacts.push(action.payload);\r\n    },\r\n    prepare(name, number) {\r\n      return {\r\n        payload: {\r\n          name,\r\n          number,\r\n          id: nanoid(),\r\n        },\r\n      };\r\n    },\r\n    removeContact: (state, action) => {\r\n      const index = state.contacts.findIndex(\r\n        contact => contact.id === action.payload\r\n      );\r\n      state.contacts.splice(index, 1);\r\n    },\r\n    setContacts: (state, action) => {\r\n      return { ...state, contacts: [...action.payload] };\r\n    },\r\n    setFilters: (state, action) => {\r\n      return { ...state, filter: action.payload };\r\n    },\r\n  },\r\n});\r\n\r\nexport {setContacts, }"]},"metadata":{},"sourceType":"module"}