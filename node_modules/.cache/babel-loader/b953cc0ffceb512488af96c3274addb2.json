{"ast":null,"code":"// import { createReducer } from '@reduxjs/toolkit';\n// import { addContact, removeContact, setContacts, setFilters } from './actions';\n// export const initialState = {\n//   contacts: [],\n//   filter: '',\n// };\n// const state = initialState;\n// export const rootReducer = createReducer(state, {\n//   [addContact]: (state, action) => {\n//     state.contacts.push(action.payload);\n//   },\n//   [removeContact]: (state, action) => {\n//     const index = state.contacts.findIndex(\n//       contact => contact.id === action.payload\n//     );\n//     state.contacts.splice(index, 1);\n//   },\n//   [setContacts]: (state, action) => {\n//     return { ...state, contacts: [...action.payload] };\n//   },\n//   [setFilters]: (state, action) => {\n//     return { ...state, filter: action.payload };\n//   },\n// });\nimport { nanoid } from 'nanoid';\nimport { combineReducers, createSlice } from '@reduxjs/toolkit';\nimport filterSlice from './filterSlice';\nexport const initialState = {\n  contacts: []\n};\nexport const contactsReducer = createSlice({\n  name: 'contacts',\n  initialState: initialState.contacts,\n  reducers: {\n    addContacts: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n\n      prepare(contact) {\n        return {\n          payload: {\n            name: contact.name,\n            number: contact.number,\n            id: nanoid()\n          }\n        };\n      }\n\n    },\n\n    removeContact(state, action) {\n      const index = state.findIndex(contact => contact.id === action.payload);\n      state.splice(index, 1);\n    },\n\n    setContacts(state, action) {\n      return state.push(...action.payload);\n    }\n\n  }\n});\nexport const {\n  setContacts,\n  addContact,\n  removeContact\n} = contactsReducer.actions;\nexport const rootReducer = combineReducers({\n  contacts: contactsReducer.reducer,\n  filter: filterSlice.reducer\n});","map":{"version":3,"sources":["M:/programy/Programy_kodowanie/github/goit-react-hw-06-phonebook/src/redux/contactsSlice.js"],"names":["nanoid","combineReducers","createSlice","filterSlice","initialState","contacts","contactsReducer","name","reducers","addContacts","reducer","state","action","push","payload","prepare","contact","number","id","removeContact","index","findIndex","splice","setContacts","addContact","actions","rootReducer","filter"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,kBAA7C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,OAAO,MAAMC,YAAY,GAAG;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAArB;AAEP,OAAO,MAAMC,eAAe,GAAGJ,WAAW,CAAC;AACzCK,EAAAA,IAAI,EAAE,UADmC;AAEzCH,EAAAA,YAAY,EAAEA,YAAY,CAACC,QAFc;AAGzCG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAE;AACXC,MAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACrBD,QAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACD,OAHU;;AAIXC,MAAAA,OAAO,CAACC,OAAD,EAAU;AACf,eAAO;AACLF,UAAAA,OAAO,EAAE;AACPP,YAAAA,IAAI,EAAES,OAAO,CAACT,IADP;AAEPU,YAAAA,MAAM,EAAED,OAAO,CAACC,MAFT;AAGPC,YAAAA,EAAE,EAAElB,MAAM;AAHH;AADJ,SAAP;AAOD;;AAZU,KADL;;AAeRmB,IAAAA,aAAa,CAACR,KAAD,EAAQC,MAAR,EAAgB;AAC3B,YAAMQ,KAAK,GAAGT,KAAK,CAACU,SAAN,CAAgBL,OAAO,IAAIA,OAAO,CAACE,EAAR,KAAeN,MAAM,CAACE,OAAjD,CAAd;AACAH,MAAAA,KAAK,CAACW,MAAN,CAAaF,KAAb,EAAoB,CAApB;AACD,KAlBO;;AAmBRG,IAAAA,WAAW,CAACZ,KAAD,EAAQC,MAAR,EAAgB;AACzB,aAAOD,KAAK,CAACE,IAAN,CAAW,GAAGD,MAAM,CAACE,OAArB,CAAP;AACD;;AArBO;AAH+B,CAAD,CAAnC;AA4BP,OAAO,MAAM;AAAES,EAAAA,WAAF;AAAeC,EAAAA,UAAf;AAA2BL,EAAAA;AAA3B,IACXb,eAAe,CAACmB,OADX;AAGP,OAAO,MAAMC,WAAW,GAAGzB,eAAe,CAAC;AACzCI,EAAAA,QAAQ,EAAEC,eAAe,CAACI,OADe;AAEzCiB,EAAAA,MAAM,EAAExB,WAAW,CAACO;AAFqB,CAAD,CAAnC","sourcesContent":["// import { createReducer } from '@reduxjs/toolkit';\r\n// import { addContact, removeContact, setContacts, setFilters } from './actions';\r\n\r\n// export const initialState = {\r\n//   contacts: [],\r\n//   filter: '',\r\n// };\r\n// const state = initialState;\r\n\r\n// export const rootReducer = createReducer(state, {\r\n//   [addContact]: (state, action) => {\r\n//     state.contacts.push(action.payload);\r\n//   },\r\n//   [removeContact]: (state, action) => {\r\n//     const index = state.contacts.findIndex(\r\n//       contact => contact.id === action.payload\r\n//     );\r\n//     state.contacts.splice(index, 1);\r\n//   },\r\n//   [setContacts]: (state, action) => {\r\n//     return { ...state, contacts: [...action.payload] };\r\n//   },\r\n//   [setFilters]: (state, action) => {\r\n//     return { ...state, filter: action.payload };\r\n//   },\r\n// });\r\n\r\nimport { nanoid } from 'nanoid';\r\nimport { combineReducers, createSlice } from '@reduxjs/toolkit';\r\nimport filterSlice from './filterSlice';\r\n\r\nexport const initialState = { contacts: [] };\r\n\r\nexport const contactsReducer = createSlice({\r\n  name: 'contacts',\r\n  initialState: initialState.contacts,\r\n  reducers: {\r\n    addContacts: {\r\n      reducer(state, action) {\r\n        state.push(action.payload);\r\n      },\r\n      prepare(contact) {\r\n        return {\r\n          payload: {\r\n            name: contact.name,\r\n            number: contact.number,\r\n            id: nanoid(),\r\n          },\r\n        };\r\n      },\r\n    },\r\n    removeContact(state, action) {\r\n      const index = state.findIndex(contact => contact.id === action.payload);\r\n      state.splice(index, 1);\r\n    },\r\n    setContacts(state, action) {\r\n      return state.push(...action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setContacts, addContact, removeContact } =\r\n  contactsReducer.actions;\r\n\r\nexport const rootReducer = combineReducers({\r\n  contacts: contactsReducer.reducer,\r\n  filter: filterSlice.reducer,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}