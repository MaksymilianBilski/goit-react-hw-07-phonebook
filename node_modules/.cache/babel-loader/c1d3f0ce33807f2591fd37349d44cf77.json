{"ast":null,"code":"// import { createReducer } from '@reduxjs/toolkit';\n// import { addContact, removeContact, setContacts, setFilters } from './actions';\n// export const initialState = {\n//   contacts: [],\n//   filter: '',\n// };\n// const state = initialState;\n// export const rootReducer = createReducer(state, {\n//   [addContact]: (state, action) => {\n//     state.contacts.push(action.payload);\n//   },\n//   [removeContact]: (state, action) => {\n//     const index = state.contacts.findIndex(\n//       contact => contact.id === action.payload\n//     );\n//     state.contacts.splice(index, 1);\n//   },\n//   [setContacts]: (state, action) => {\n//     return { ...state, contacts: [...action.payload] };\n//   },\n//   [setFilters]: (state, action) => {\n//     return { ...state, filter: action.payload };\n//   },\n// });\nimport { nanoid } from 'nanoid';\nimport { createSlice } from '@reduxjs/toolkit'; // import { addContact, removeContact, setContacts, setFilters } from './actions';\n\nexport const initialState = {\n  contacts: [],\n  filter: ''\n};\nconst state = initialState;\nexport const rootReducer = createSlice({\n  name: 'contacts',\n  initialState: state,\n  reducers: {\n    addContact: {\n      reducer(state, action) {\n        state.contacts.push(action.payload);\n      },\n\n      prepare(name, number) {\n        return {\n          payload: {\n            name,\n            number,\n            id: nanoid()\n          }\n        };\n      }\n\n    },\n    removeContact: (state, action) => {\n      const index = state.contacts.findIndex(contact => contact.id === action.payload);\n      state.contacts.splice(index, 1);\n    },\n    setContacts: (state, action) => {\n      return { ...state,\n        contacts: [...action.payload]\n      };\n    },\n    setFilters: (state, action) => {\n      return { ...state,\n        filter: action.payload\n      };\n    }\n  }\n});\nexport const {\n  setContacts,\n  addContact,\n  removeContact,\n  setFilters\n} = rootReducer.actions;","map":{"version":3,"sources":["M:/programy/Programy_kodowanie/github/goit-react-hw-06-phonebook/src/redux/reducers.js"],"names":["nanoid","createSlice","initialState","contacts","filter","state","rootReducer","name","reducers","addContact","reducer","action","push","payload","prepare","number","id","removeContact","index","findIndex","contact","splice","setContacts","setFilters","actions"],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,WAAT,QAA4B,kBAA5B,C,CACA;;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,QAAQ,EAAE,EADgB;AAE1BC,EAAAA,MAAM,EAAE;AAFkB,CAArB;AAIP,MAAMC,KAAK,GAAGH,YAAd;AAEA,OAAO,MAAMI,WAAW,GAAGL,WAAW,CAAC;AACrCM,EAAAA,IAAI,EAAE,UAD+B;AAErCL,EAAAA,YAAY,EAAEG,KAFuB;AAGrCG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE;AACVC,MAAAA,OAAO,CAACL,KAAD,EAAQM,MAAR,EAAgB;AACrBN,QAAAA,KAAK,CAACF,QAAN,CAAeS,IAAf,CAAoBD,MAAM,CAACE,OAA3B;AACD,OAHS;;AAIVC,MAAAA,OAAO,CAACP,IAAD,EAAOQ,MAAP,EAAe;AACpB,eAAO;AACLF,UAAAA,OAAO,EAAE;AACPN,YAAAA,IADO;AAEPQ,YAAAA,MAFO;AAGPC,YAAAA,EAAE,EAAEhB,MAAM;AAHH;AADJ,SAAP;AAOD;;AAZS,KADJ;AAeRiB,IAAAA,aAAa,EAAE,CAACZ,KAAD,EAAQM,MAAR,KAAmB;AAChC,YAAMO,KAAK,GAAGb,KAAK,CAACF,QAAN,CAAegB,SAAf,CACZC,OAAO,IAAIA,OAAO,CAACJ,EAAR,KAAeL,MAAM,CAACE,OADrB,CAAd;AAGAR,MAAAA,KAAK,CAACF,QAAN,CAAekB,MAAf,CAAsBH,KAAtB,EAA6B,CAA7B;AACD,KApBO;AAqBRI,IAAAA,WAAW,EAAE,CAACjB,KAAD,EAAQM,MAAR,KAAmB;AAC9B,aAAO,EAAE,GAAGN,KAAL;AAAYF,QAAAA,QAAQ,EAAE,CAAC,GAAGQ,MAAM,CAACE,OAAX;AAAtB,OAAP;AACD,KAvBO;AAwBRU,IAAAA,UAAU,EAAE,CAAClB,KAAD,EAAQM,MAAR,KAAmB;AAC7B,aAAO,EAAE,GAAGN,KAAL;AAAYD,QAAAA,MAAM,EAAEO,MAAM,CAACE;AAA3B,OAAP;AACD;AA1BO;AAH2B,CAAD,CAA/B;AAiCP,OAAO,MAAM;AAAES,EAAAA,WAAF;AAAeb,EAAAA,UAAf;AAA2BQ,EAAAA,aAA3B;AAA0CM,EAAAA;AAA1C,IACXjB,WAAW,CAACkB,OADP","sourcesContent":["// import { createReducer } from '@reduxjs/toolkit';\r\n// import { addContact, removeContact, setContacts, setFilters } from './actions';\r\n\r\n// export const initialState = {\r\n//   contacts: [],\r\n//   filter: '',\r\n// };\r\n// const state = initialState;\r\n\r\n// export const rootReducer = createReducer(state, {\r\n//   [addContact]: (state, action) => {\r\n//     state.contacts.push(action.payload);\r\n//   },\r\n//   [removeContact]: (state, action) => {\r\n//     const index = state.contacts.findIndex(\r\n//       contact => contact.id === action.payload\r\n//     );\r\n//     state.contacts.splice(index, 1);\r\n//   },\r\n//   [setContacts]: (state, action) => {\r\n//     return { ...state, contacts: [...action.payload] };\r\n//   },\r\n//   [setFilters]: (state, action) => {\r\n//     return { ...state, filter: action.payload };\r\n//   },\r\n// });\r\n\r\nimport { nanoid } from 'nanoid';\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n// import { addContact, removeContact, setContacts, setFilters } from './actions';\r\n\r\nexport const initialState = {\r\n  contacts: [],\r\n  filter: '',\r\n};\r\nconst state = initialState;\r\n\r\nexport const rootReducer = createSlice({\r\n  name: 'contacts',\r\n  initialState: state,\r\n  reducers: {\r\n    addContact: {\r\n      reducer(state, action) {\r\n        state.contacts.push(action.payload);\r\n      },\r\n      prepare(name, number) {\r\n        return {\r\n          payload: {\r\n            name,\r\n            number,\r\n            id: nanoid(),\r\n          },\r\n        };\r\n      },\r\n    },\r\n    removeContact: (state, action) => {\r\n      const index = state.contacts.findIndex(\r\n        contact => contact.id === action.payload\r\n      );\r\n      state.contacts.splice(index, 1);\r\n    },\r\n    setContacts: (state, action) => {\r\n      return { ...state, contacts: [...action.payload] };\r\n    },\r\n    setFilters: (state, action) => {\r\n      return { ...state, filter: action.payload };\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setContacts, addContact, removeContact, setFilters } =\r\n  rootReducer.actions;\r\n"]},"metadata":{},"sourceType":"module"}